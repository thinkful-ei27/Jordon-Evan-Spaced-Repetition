{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { SubmissionError } from 'redux-form';\nimport { API_BASE_URL } from '../config';\nimport { normalizeResponseErrors } from './utils';\nimport { saveAuthToken, clearAuthToken } from '../local-storage';\nexport var SET_AUTH_TOKEN = 'SET_AUTH_TOKEN';\nexport var setAuthToken = function setAuthToken(authToken) {\n  return {\n    type: SET_AUTH_TOKEN,\n    authToken: authToken\n  };\n};\nexport var CLEAR_AUTH = 'CLEAR_AUTH';\nexport var clearAuth = function clearAuth() {\n  return {\n    type: CLEAR_AUTH\n  };\n};\nexport var AUTH_REQUEST = 'AUTH_REQUEST';\nexport var authRequest = function authRequest() {\n  return {\n    type: AUTH_REQUEST\n  };\n};\nexport var AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport var authSuccess = function authSuccess(currentUser) {\n  return {\n    type: AUTH_SUCCESS,\n    currentUser: currentUser\n  };\n};\nexport var AUTH_ERROR = 'AUTH_ERROR';\nexport var authError = function authError(error) {\n  return {\n    type: AUTH_ERROR,\n    error: error\n  };\n}; // Stores the auth token in state and localStorage, and decodes and stores\n// the user data stored in the token\n\nvar storeAuthInfo = function storeAuthInfo(authToken, dispatch) {\n  var decodedToken = jwtDecode(authToken);\n  dispatch(setAuthToken(authToken));\n  dispatch(authSuccess(decodedToken.user));\n  saveAuthToken(authToken);\n};\n\nexport var login = function login(username, password) {\n  return function (dispatch) {\n    dispatch(authRequest());\n    return fetch(\"\".concat(API_BASE_URL, \"/auth/login\"), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }) // Reject any requests which don't return a 200 status, creating\n    // errors which follow a consistent format\n    .then(function (res) {\n      return normalizeResponseErrors(res);\n    }).then(function (res) {\n      return res.json();\n    }).then(function (_ref) {\n      var authToken = _ref.authToken;\n      return storeAuthInfo(authToken, dispatch);\n    }).catch(function (err) {\n      var code = err.code;\n      var message = code === 401 ? 'Incorrect username or password' : 'Unable to login, please try again';\n      dispatch(authError(err)); // Could not authenticate, so return a SubmissionError for Redux\n      // Form\n\n      return Promise.reject(new SubmissionError({\n        _error: message\n      }));\n    });\n  };\n};\nexport var refreshAuthToken = function refreshAuthToken() {\n  return function (dispatch, getState) {\n    dispatch(authRequest());\n    var authToken = getState().auth.authToken;\n    return fetch(\"\".concat(API_BASE_URL, \"/auth/refresh\"), {\n      method: 'POST',\n      headers: {\n        // Provide our existing token as credentials to get a new one\n        Authorization: \"Bearer \".concat(authToken)\n      }\n    }).then(function (res) {\n      return normalizeResponseErrors(res);\n    }).then(function (res) {\n      return res.json();\n    }).then(function (_ref2) {\n      var authToken = _ref2.authToken;\n      return storeAuthInfo(authToken, dispatch);\n    }).catch(function (err) {\n      // We couldn't get a refresh token because our current credentials\n      // are invalid or expired, or something else went wrong, so clear\n      // them and sign us out\n      dispatch(authError(err));\n      dispatch(clearAuth());\n      clearAuthToken(authToken);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/jordanheffernan/projects/portfolioProjects/Jordon-Evan-Spaced-Repetition/src/actions/auth.js"],"names":["jwtDecode","SubmissionError","API_BASE_URL","normalizeResponseErrors","saveAuthToken","clearAuthToken","SET_AUTH_TOKEN","setAuthToken","authToken","type","CLEAR_AUTH","clearAuth","AUTH_REQUEST","authRequest","AUTH_SUCCESS","authSuccess","currentUser","AUTH_ERROR","authError","error","storeAuthInfo","dispatch","decodedToken","user","login","username","password","fetch","method","headers","body","JSON","stringify","then","res","json","catch","err","code","message","Promise","reject","_error","refreshAuthToken","getState","auth","Authorization"],"mappings":"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","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport { SubmissionError } from 'redux-form';\n\nimport { API_BASE_URL } from '../config';\nimport { normalizeResponseErrors } from './utils';\nimport { saveAuthToken, clearAuthToken } from '../local-storage';\n\nexport const SET_AUTH_TOKEN = 'SET_AUTH_TOKEN';\nexport const setAuthToken = authToken => ({\n  type: SET_AUTH_TOKEN,\n  authToken\n});\n\nexport const CLEAR_AUTH = 'CLEAR_AUTH';\nexport const clearAuth = () => ({\n  type: CLEAR_AUTH\n});\n\nexport const AUTH_REQUEST = 'AUTH_REQUEST';\nexport const authRequest = () => ({\n  type: AUTH_REQUEST\n});\n\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const authSuccess = currentUser => ({\n  type: AUTH_SUCCESS,\n  currentUser\n});\n\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const authError = error => ({\n  type: AUTH_ERROR,\n  error\n});\n\n// Stores the auth token in state and localStorage, and decodes and stores\n// the user data stored in the token\nconst storeAuthInfo = (authToken, dispatch) => {\n  const decodedToken = jwtDecode(authToken);\n  dispatch(setAuthToken(authToken));\n  dispatch(authSuccess(decodedToken.user));\n  saveAuthToken(authToken);\n};\n\nexport const login = (username, password) => dispatch => {\n  dispatch(authRequest());\n  return (\n    fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    })\n      // Reject any requests which don't return a 200 status, creating\n      // errors which follow a consistent format\n      .then(res => normalizeResponseErrors(res))\n      .then(res => res.json())\n      .then(({ authToken }) => storeAuthInfo(authToken, dispatch))\n      .catch(err => {\n        const { code } = err;\n        const message =\n          code === 401\n            ? 'Incorrect username or password'\n            : 'Unable to login, please try again';\n        dispatch(authError(err));\n        // Could not authenticate, so return a SubmissionError for Redux\n        // Form\n        return Promise.reject(\n          new SubmissionError({\n            _error: message\n          })\n        );\n      })\n  );\n};\n\nexport const refreshAuthToken = () => (dispatch, getState) => {\n  dispatch(authRequest());\n  const authToken = getState().auth.authToken;\n  return fetch(`${API_BASE_URL}/auth/refresh`, {\n    method: 'POST',\n    headers: {\n      // Provide our existing token as credentials to get a new one\n      Authorization: `Bearer ${authToken}`\n    }\n  })\n    .then(res => normalizeResponseErrors(res))\n    .then(res => res.json())\n    .then(({ authToken }) => storeAuthInfo(authToken, dispatch))\n    .catch(err => {\n      // We couldn't get a refresh token because our current credentials\n      // are invalid or expired, or something else went wrong, so clear\n      // them and sign us out\n      dispatch(authError(err));\n      dispatch(clearAuth());\n      clearAuthToken(authToken);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}