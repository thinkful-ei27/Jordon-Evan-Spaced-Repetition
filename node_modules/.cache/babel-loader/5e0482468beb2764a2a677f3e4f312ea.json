{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\nimport { loadAuthToken } from './local-storage';\nimport authReducer from './reducers/auth';\nimport protectedDataReducer from './reducers/protected-data';\nimport { setAuthToken, refreshAuthToken } from './actions/auth';\nvar store = createStore(combineReducers({\n  form: formReducer,\n  auth: authReducer,\n  protectedData: protectedDataReducer\n}), applyMiddleware(thunk)); // Hydrate the authToken from localStorage if it exist\n\nvar authToken = loadAuthToken();\n\nif (authToken) {\n  var token = authToken;\n  store.dispatch(setAuthToken(token));\n  store.dispatch(refreshAuthToken());\n}\n\nexport default store;","map":{"version":3,"sources":["/Users/jordanheffernan/projects/portfolioProjects/Jordon-Evan-Spaced-Repetition/client/src/store.js"],"names":["createStore","applyMiddleware","combineReducers","reducer","formReducer","thunk","loadAuthToken","authReducer","protectedDataReducer","setAuthToken","refreshAuthToken","store","form","auth","protectedData","authToken","token","dispatch"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,gBAA/C;AAEA,IAAMC,KAAK,GAAGX,WAAW,CACvBE,eAAe,CAAC;AACdU,EAAAA,IAAI,EAAER,WADQ;AAEdS,EAAAA,IAAI,EAAEN,WAFQ;AAGdO,EAAAA,aAAa,EAAEN;AAHD,CAAD,CADQ,EAMvBP,eAAe,CAACI,KAAD,CANQ,CAAzB,C,CASA;;AACA,IAAMU,SAAS,GAAGT,aAAa,EAA/B;;AACA,IAAIS,SAAJ,EAAe;AACb,MAAMC,KAAK,GAAGD,SAAd;AACAJ,EAAAA,KAAK,CAACM,QAAN,CAAeR,YAAY,CAACO,KAAD,CAA3B;AACAL,EAAAA,KAAK,CAACM,QAAN,CAAeP,gBAAgB,EAA/B;AACD;;AAED,eAAeC,KAAf","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\nimport { loadAuthToken } from './local-storage';\nimport authReducer from './reducers/auth';\nimport protectedDataReducer from './reducers/protected-data';\nimport { setAuthToken, refreshAuthToken } from './actions/auth';\n\nconst store = createStore(\n  combineReducers({\n    form: formReducer,\n    auth: authReducer,\n    protectedData: protectedDataReducer\n  }),\n  applyMiddleware(thunk)\n);\n\n// Hydrate the authToken from localStorage if it exist\nconst authToken = loadAuthToken();\nif (authToken) {\n  const token = authToken;\n  store.dispatch(setAuthToken(token));\n  store.dispatch(refreshAuthToken());\n}\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}