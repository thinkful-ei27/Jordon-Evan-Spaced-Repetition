{"ast":null,"code":"import _classCallCheck from \"/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/src/components/WordCard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, reset } from 'redux-form';\nimport { required } from '../validators';\nimport { setUserInput } from '../actions/word-actions/getWords';\nimport Input from './input';\nimport { getWords } from '../actions/word-actions/getWords';\nimport { postGuess } from '../actions/word-actions/postGuess';\nimport requiresLogin from './requires-login';\n\nvar WordCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WordCard, _Component);\n\n  function WordCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WordCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WordCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.checkAnswer = function (value) {\n      return _this.props.words.find(function (word) {\n        return value.answerInput === word.answer;\n      }) ? true : false;\n    };\n\n    return _this;\n  }\n\n  _createClass(WordCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dispatch(getWords(this.props.words));\n    } // checkAnswer = value => {\n    //   return value.answerInput === this.props.words[0].answer;\n    // };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          className: \"loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, \"loading...\");\n      }\n\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          handleSubmit = _this$props.handleSubmit,\n          words = _this$props.words,\n          correctOrIncorrect = _this$props.correctOrIncorrect;\n      var renderRightOrWrong = correctOrIncorrect.rightOrWrong === 'correct' ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"\\xA1PERFECTO!\") : correctOrIncorrect.rightOrWrong === 'incorrect' ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"quiz\\xE1s la pr\\xF3xima \\uD83D\\uDE15\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"la respuesta es \".concat(correctOrIncorrect.answer))) : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"t\\xFA lo sabes\");\n      var checkIfFirstTimeSeeing = words.incorrectCount === 0 && words.correctCount === 0 ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"This is the first time you have seen this word\") : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"has conocido esta palabra \", React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"\".concat(words.correctCount)), \" veces\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"respondiste esta palabra incorrectamente\", ' ', React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"\".concat(words.incorrectCount)), \" veces\"));\n      return React.createElement(\"div\", {\n        className: \"word-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, words.word), React.createElement(\"form\", {\n        onSubmit: handleSubmit(function (value) {\n          dispatch(postGuess(value)).then(function (res) {\n            return res.correctOrIncorrect;\n          });\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"guess\",\n        className: \"guess\",\n        component: Input,\n        type: \"text\",\n        placeholder: \"tu respuesta\",\n        ref: \"guess\",\n        validate: [required],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"word-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"env\\xEDa tu respuesta\"), React.createElement(\"button\", {\n        type: \"reset\",\n        onClick: function onClick(value) {\n          dispatch(getWords(words));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"proxima palabra\", ' '))), React.createElement(\"div\", {\n        className: \"feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, renderRightOrWrong));\n    } //onSubmit check if answer is correct and display feedback accordingly\n    // somehow switch button to go to the next question?\n\n  }]);\n\n  return WordCard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    words: state.words.words,\n    correctOrIncorrect: state.words.correctOrIncorrect,\n    loading: state.words.loading\n  };\n};\n\nWordCard = requiresLogin()(connect(mapStateToProps)(WordCard));\nexport default reduxForm({\n  form: 'submitAnswerForm'\n})(WordCard);","map":{"version":3,"sources":["/Users/evanguirino/thinkful/spaced-repetition-client/Jordon-Evan-Spaced-Repetition/src/components/WordCard.js"],"names":["React","Component","connect","Field","reduxForm","reset","required","setUserInput","Input","getWords","postGuess","requiresLogin","WordCard","checkAnswer","value","props","words","find","word","answerInput","answer","dispatch","loading","handleSubmit","correctOrIncorrect","renderRightOrWrong","rightOrWrong","checkIfFirstTimeSeeing","incorrectCount","correctCount","then","res","mapStateToProps","state","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm, reset } from 'redux-form';\nimport { required } from '../validators';\nimport { setUserInput } from '../actions/word-actions/getWords';\nimport Input from './input';\nimport { getWords } from '../actions/word-actions/getWords';\nimport { postGuess } from '../actions/word-actions/postGuess';\nimport requiresLogin from './requires-login';\nclass WordCard extends Component {\n  componentDidMount() {\n    this.props.dispatch(getWords(this.props.words));\n  }\n\n  // checkAnswer = value => {\n  //   return value.answerInput === this.props.words[0].answer;\n  // };\n  checkAnswer = value => {\n    return this.props.words.find(word => value.answerInput === word.answer)\n      ? true\n      : false;\n  };\n  render() {\n    if (this.props.loading) {\n      return <div className=\"loading\">loading...</div>;\n    }\n    const { dispatch, handleSubmit, words, correctOrIncorrect } = this.props;\n    const renderRightOrWrong =\n      correctOrIncorrect.rightOrWrong === 'correct' ? (\n        <p>¡PERFECTO!</p>\n      ) : correctOrIncorrect.rightOrWrong === 'incorrect' ? (\n        <div>\n          <p>quizás la próxima 😕</p>\n          <p>{`la respuesta es ${correctOrIncorrect.answer}`}</p>\n        </div>\n      ) : (\n        <p>tú lo sabes</p>\n      );\n\n    const checkIfFirstTimeSeeing =\n      words.incorrectCount === 0 && words.correctCount === 0 ? (\n        <p>This is the first time you have seen this word</p>\n      ) : (\n        <div>\n          <p>\n            has conocido esta palabra <u>{`${words.correctCount}`}</u> veces\n          </p>\n          <p>\n            respondiste esta palabra incorrectamente{' '}\n            <u>{`${words.incorrectCount}`}</u> veces\n          </p>\n        </div>\n      );\n\n    return (\n      <div className=\"word-card\">\n        <header>{words.word}</header>\n        <form\n          onSubmit={handleSubmit(value => {\n            dispatch(postGuess(value)).then(res => res.correctOrIncorrect);\n          })}\n        >\n          <div />\n          <Field\n            name=\"guess\"\n            className=\"guess\"\n            component={Input}\n            type=\"text\"\n            placeholder=\"tu respuesta\"\n            ref=\"guess\"\n            validate={[required]}\n          />\n          <div />\n          <div className=\"word-buttons\">\n            <button type=\"submit\">envía tu respuesta</button>\n            <button\n              type=\"reset\"\n              onClick={value => {\n                dispatch(getWords(words));\n              }}\n            >\n              proxima palabra{' '}\n            </button>\n          </div>\n        </form>\n        <div className=\"feedback\">{renderRightOrWrong}</div>\n      </div>\n    );\n  }\n  //onSubmit check if answer is correct and display feedback accordingly\n  // somehow switch button to go to the next question?\n}\n\nconst mapStateToProps = state => ({\n  words: state.words.words,\n  correctOrIncorrect: state.words.correctOrIncorrect,\n  loading: state.words.loading\n});\n\nWordCard = requiresLogin()(connect(mapStateToProps)(WordCard));\nexport default reduxForm({\n  form: 'submitAnswerForm'\n})(WordCard);\n"]},"metadata":{},"sourceType":"module"}