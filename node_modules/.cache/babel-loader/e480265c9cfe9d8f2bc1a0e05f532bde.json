{"ast":null,"code":"// Boilerplate code for handling errors from the API.  If the error response\n// contains JSON then we return a rejected promise containing the decoded\n// JSON.  If the error doesn't contain JSON then we return a rejected promise\n// containing the status text.  If there is no error then we continue with\n// the promise chain.\nexport var normalizeResponseErrors = function normalizeResponseErrors(res) {\n  if (!res.ok) {\n    if (res.headers.has('content-type') && res.headers.get('content-type').startsWith('application/json')) {\n      // It's a nice JSON error returned by us, so decode it\n      return res.json().then(function (err) {\n        return Promise.reject(err);\n      });\n    } // It's a less informative error returned by express\n\n\n    return Promise.reject({\n      code: res.status,\n      message: res.statusText\n    });\n  }\n\n  return res;\n};","map":{"version":3,"sources":["/Users/jordanheffernan/projects/portfolioProjects/Jordon-Evan-Spaced-Repetition/client/src/actions/utils.js"],"names":["normalizeResponseErrors","res","ok","headers","has","get","startsWith","json","then","err","Promise","reject","code","status","message","statusText"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,GAAG,EAAI;AAC1C,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,QACID,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,KACAH,GAAG,CAACE,OAAJ,CAAYE,GAAZ,CAAgB,cAAhB,EAAgCC,UAAhC,CAA2C,kBAA3C,CAFJ,EAGE;AACE;AACA,aAAOL,GAAG,CAACM,IAAJ,GAAWC,IAAX,CAAgB,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAJ;AAAA,OAAnB,CAAP;AACH,KAPQ,CAQT;;;AACA,WAAOC,OAAO,CAACC,MAAR,CAAe;AAClBC,MAAAA,IAAI,EAAEX,GAAG,CAACY,MADQ;AAElBC,MAAAA,OAAO,EAAEb,GAAG,CAACc;AAFK,KAAf,CAAP;AAIH;;AACD,SAAOd,GAAP;AACH,CAhBM","sourcesContent":["// Boilerplate code for handling errors from the API.  If the error response\n// contains JSON then we return a rejected promise containing the decoded\n// JSON.  If the error doesn't contain JSON then we return a rejected promise\n// containing the status text.  If there is no error then we continue with\n// the promise chain.\nexport const normalizeResponseErrors = res => {\n    if (!res.ok) {\n        if (\n            res.headers.has('content-type') &&\n            res.headers.get('content-type').startsWith('application/json')\n        ) {\n            // It's a nice JSON error returned by us, so decode it\n            return res.json().then(err => Promise.reject(err));\n        }\n        // It's a less informative error returned by express\n        return Promise.reject({\n            code: res.status,\n            message: res.statusText\n        });\n    }\n    return res;\n};\n"]},"metadata":{},"sourceType":"module"}